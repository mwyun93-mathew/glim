#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <map>
#include <cmath>
#include <stdlib.h>
#include <string.h>

using namespace std;

#define _TEST 1

int result_condition1(vector<vector<int>> dots, int p0, int p1, int p2, int p3)
{
    int x1 = dots[p0][0];
    int y1 = dots[p0][1];
    int x2 = dots[p1][0];
    int y2 = dots[p1][1];
    int x3 = dots[p2][0];
    int y3 = dots[p2][1];
    int x4 = dots[p3][0];
    int y4 = dots[p3][1];

    double slope1 = (double)(y1 - y2) / (x1 - x2);
    double slope2 = (double)(y2 - y3) / (x2 - x3);
    double slope3 = (double)(y2 - y4) / (x2 - x4);
    double slope4 = (double)(y1 - y3) / (x1 - x3);
    double slope5 = (double)(y1 - y4) / (x1 - x4);
    double slope6 = (double)(y3 - y4) / (x3 - x4);

    return (slope1 == slope6 || slope2 == slope5 || slope3 == slope4) ? 1 : 0;
}

int solution(vector<vector<int>> dots)
{
    int answer = 0;

    // 입력: 점 4개
    // 임의의 두 점으로 직선 만들기
    // [a-b, c-d],[a-c, b-d],[a-d, b-c]

    if (result_condition1(dots, 0, 1, 2, 3) == 1)
        return 1;

    if (result_condition1(dots, 0, 2, 1, 3) == 1)
        return 1;

    if (result_condition1(dots, 0, 3, 1, 2) == 1)
        return 1;

    // 서로 다른 두개 이상의 점이 겹치는 경우는 없습니다.

    // 임의의 두 점을 이은 직선이 x축 또는 y축과 평행한 경우는 주어지지 않습니다.

    return answer;
}

int make_dot_point(string& str, vector<int>& vec)
{
    if (str.length() == 0)
        return -1;

    if (str[0] != '[' || str[str.length() - 1] != ']')
    {
        return -1;
    }

    string row_str = str.substr(1, str.length() - 2);

#if defined(_WIN32)
    char* context;

    char* ptr = strtok_s((char*)row_str.c_str(), ",", &context);
#else
    char* ptr = strtok((char*)str.c_str(), ",");
#endif
    int i = 0;

    while (ptr != NULL)
    {
        int value = strtol(ptr, NULL, 10);
        vec.push_back(value);
#if defined(_WIN32)
        ptr = strtok_s(NULL, ",", &context);
#else
        ptr = strtok(NULL, ",");
#endif
    }

    return 0;

}

int make_dots(string& str, vector<vector<int>>& dots)
{
    if (str.length() == 0)
    {
        return -1;
    }


    // parser 만들기

    str.erase(std::remove_if(str.begin(), str.end(), ::isspace), str.end());

    int start_block = -1;
    int end_block = -1;

    if (str[0] != '[' || str[str.length() - 1] != ']')
    {
        return -1;
    }

    int index = 0;

    for (int i = 1; i < str.length() - 1; i++)
    {
        if (str[i] == '[')
        {
            start_block = i;
        }
        else if (str[i] == ']')
        {
            end_block = i;
        }

        if (start_block >= 0 && end_block >= 0)
        {
            string row_str = str.substr(start_block, end_block - start_block + 1);
            vector<int> row_vec;
            if (make_dot_point(row_str, row_vec) != 0)
            {
                return -1;
            }

            dots.push_back(row_vec);

            start_block = -1;
            end_block = -1;
        }
    }

    return 0;
}

int check_dots(vector<vector<int>>& dots)
{
    if (dots.size() != 4)
        return -1;

    for (int i = 0; i < dots.size(); i++)
    {
        for (int j = 0; j < dots[i].size(); j++)
        {
            if (dots[i][j] < 0 || 100 < dots[i][j])
                return -1;
        }
    }
    return 0;
}

int main(int argc, char** argv)
{
    string dots_str = "";
    vector<vector<int>> dots;
    int result = 0;

#if _TEST
    // test case1
    dots_str = "[[1, 4], [9, 2], [3, 8], [11, 6]]";
    dots.clear();

    if (make_dots(dots_str, dots) == -1)
    {
        return -1;
    }

    if (check_dots(dots) == -1)
    {
        return -1;
    }

    result = solution(dots);

    std::cout << result << std::endl;

    // test case2
    dots_str = "[[3, 5], [4, 1], [2, 4], [5, 10]] ";
    dots.clear();

    if (make_dots(dots_str, dots) == -1)
    {
        return -1;
    }

    if (check_dots(dots) == -1)
    {
        return -1;
    }

    result = solution(dots);

    std::cout << result << std::endl;
#else

    if (argc >= 2)
    {
        dots_str.append(argv[1]);
    }
    else
    {
        std::cin >> dots_str;
    }


    if (make_dots(dots_str, dots) == -1)
    {
        return -1;
    }

    if (check_dots(dots) == -1)
    {
        return -1;
    }

    result = solution(dots);

    std::cout << result << std::endl;
#endif

    return 0;
}