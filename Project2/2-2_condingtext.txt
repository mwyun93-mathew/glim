#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <stdlib.h>
#include <string.h>

using namespace std;

//#define _TEST 1

int solution(vector<vector<int>> board, int k)
{
    int answer = 0;

    for (int i = 0; i < board.size(); i++)
    {
        for (int j = 0; j < board[i].size(); j++)
        {
            if ((i + j) <= k)
            {
                answer += board[i][j];
            }
        }
    }

    return answer;
}

int strtoi(char* str)
{
    if (str == nullptr || strlen(str) == 0)
        return -1;

    return strtol(str, NULL, 10);
}


int make_row(string& str, vector<int>& vec)
{
    if (str.length() == 0)
        return -1;

    if (str[0] != '[' || str[str.length() - 1] != ']')
    {
        return -1;
    }

    string row_str = str.substr(1, str.length()-2);

#if defined(_WIN32)
    char *context;

    char* ptr = strtok_s((char *)row_str.c_str(), ",", &context);
#else
    char* ptr = strtok((char*)str.c_str(), ",");
#endif

    while (ptr != NULL)
    {
        int value = strtol(ptr, NULL, 10);
        vec.push_back(value);
#if defined(_WIN32)
        ptr = strtok_s(NULL, ",", &context);
#else
        ptr = strtok(NULL, ",");
#endif
    }

    return 0;

}
int make_board(string& str, vector<vector<int>>& board)
{
    if (str.length() == 0)
    {
        return -1;
    }


    // parser 만들기
  
    str.erase(std::remove_if(str.begin(), str.end(), ::isspace), str.end());
    
    int start_block = -1;
    int end_block = -1;
  
    if (str[0] != '[' || str[str.length() - 1] != ']')
    {
        return -1;
    }

    for (int i = 1; i < str.length()-1; i++)
    {
        if (str[i] == '[')
        {
            start_block = i;
        }
        else if (str[i] == ']')
        {
            end_block = i;
        }
        
        if (start_block >= 0 && end_block >= 0)
        {
            string row_str = str.substr(start_block, end_block-start_block+1);
            vector<int> row_vec;
            if (make_row(row_str, row_vec) != 0)
            {
                return -1;
            }

            board.push_back(row_vec);

            start_block = -1;
            end_block = -1;
        }
    }

    return 0;
}

int check_board_size(vector<vector<int>>& board)
{
    int result = -1;

    if (board.size() < 1 || 100 < board.size())
        return -1;

    // 1 ≤ board[i]의 길이 ≤ 100
    if (board[0].size() < 1 || 100 < board[0].size())
        return -1;

    // 1 ≤ board[i][j] ≤ 10,000 (값의 범위를 의미함)
    // 모든 원소의 값 체크
    
    for (int i = 0; i < board.size(); i++)
    {
        for (int j = 0; j < board[i].size(); j++)
        {
            //if (board[i][j] < 1 || 10000 < board[i][j]) // 입력 예시와 조건식이 다름. 1 ≤ board[i][j] ≤ 10,000

            if (board[i][j] < 0 || 10000 < board[i][j]) // 0값 입력 가능하면 
                return -1;
        }
    }

    // 모든 board[i]의 길이는 같습니다.
    int v_size = 0;
    v_size = board[0].size();
    for (int i=1; i<board.size(); i++)
    {
        if (board[i].size() != v_size)
           return -1;
    }
}

int check_k_size(vector<vector<int>>& v, int k)
{
    int size = v.size() + v[0].size();

    if (k < 0 || size < k)
        return -1;

    return 0;
}

int main(int argc, char** argv)
{
#if _TEST
    vector<vector<int>> board = { {0,1,2}, {1,2,3}, {2,3,4}, {3,4,5} };
    string board_str = "[[0,1,2],[1,2,3],[2,3,4],[3,4,5]]";
    int k = 2;
#else
    vector<vector<int>> board;
    string board_str = "";
    int k = 0;
#endif

    if (argc >= 2)
    {
        board_str.append(argv[1]);
        k = strtoi(argv[2]);
    }
    else
    {
#if _TEST
        board.clear();
#else
        std::cin >> board_str >> k;
#endif
    }

    std::cout << board_str << std::endl;
    
    if (make_board(board_str, board) != 0)
    {
        std::cout << "[BAORD] make board failure" << std::endl;
        return -1;
    }

    if (check_board_size(board) == -1)
    {
        std::cout << "[BOARD] out of range: (1~100)" << std::endl;
        return -1;
    }

    if (check_k_size(board, k) == -1)
    {
        std::cout << "[K] out of range: (1~100)" << std::endl;

        return -1;
    }

    
    int result = solution(board, k);

    std::cout << result << std::endl;

    return 0;
}